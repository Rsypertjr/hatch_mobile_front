{"ast":null,"code":"var _jsxFileName = \"/var/www/hatchwmobf.tk/src/Media_item.js\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlayButton extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"ui button play-button\",\n      \"data-toggle\": \"toggle\",\n      title: \"Will not Play video stored in Firebase\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrow-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 5,\n        columnNumber: 64\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nclass Empty extends React.Component {\n  render() {\n    const spanStyle = {\n      display: 'none'\n    };\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: spanStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nclass Mediaitem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.downloadMedia = this.downloadMedia.bind(this);\n    this.clipBoard = /*#__PURE__*/React.createRef();\n    this.clipBoardButton = /*#__PURE__*/React.createRef();\n    this.state = {\n      isVideo: false,\n      linkUrl: '',\n      tvalue: '',\n      trackingLink: this.props.tracking_link,\n      downloadUrl: this.props.download_url\n    };\n  }\n\n  componentDidMount() {\n    this.clipBoardButton.current.focus();\n    this.clipBoard.current.focus();\n    var cutTextareaBtn = this.clipBoardButton.current;\n    var this2 = this;\n    cutTextareaBtn.addEventListener('click', function (event) {\n      var cutTextarea = this2.clipBoard.current;\n      let value = cutTextarea.value;\n      cutTextarea.select();\n\n      try {\n        var successful = document.execCommand('cut');\n        var msg = successful ? 'successful' : 'unsuccessful';\n        alert('Cutting text command was ' + msg + \" and '\" + value + \"' was copied to clipboard\");\n      } catch (err) {\n        console.log('Oops, unable to cut');\n      }\n    });\n  }\n\n  downloadMedia() {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = this.state.downloadUrl;\n    fetch(proxyurl + url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': this.props.media_type,\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).then(response => response.blob()).then(blob => {\n      const link = document.getElementById('forDownload');\n      link.setAttribute('download', this.state.downloadUrl); // Start download\n\n      link.click();\n    });\n  }\n\n  render() {\n    let button;\n\n    if (this.props.media_type.toString() === \"video\") {\n      this.setState.isVideo = true;\n      button = /*#__PURE__*/_jsxDEV(PlayButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 22\n      }, this);\n    } else {\n      this.setState.isVideo = false;\n      button = /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 22\n      }, this);\n    }\n\n    const invisibility = {\n      opacity: 0,\n      height: 0,\n      width: 0\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: this.props.cover_photo_url,\n        className: \"img-responsive item-image\",\n        alt: \"...\",\n        width: \"70\",\n        height: \"120\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-buttons ui icon buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui button no-play\",\n          ref: this.clipBoardButton,\n          disable: true,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-link\",\n            \"aria-hidden\": \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 95\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui button no-play\",\n          onClick: this.downloadMedia.bind(this.props.download_url, this.props.media_type),\n          \"data-toggle\": \"tooltip\",\n          \"data-placement\": \"top\",\n          title: \"Click will only download the Firebase Url\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-download\",\n            \"aria-hidden\": \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), button]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: this.state.linkUrl,\n        id: \"forDownload\",\n        style: invisibility,\n        children: \"Check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: this.clipBoard,\n        style: invisibility,\n        children: this.state.trackingLink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Mediaitem;","map":{"version":3,"sources":["/var/www/hatchwmobf.tk/src/Media_item.js"],"names":["React","useState","useEffect","PlayButton","Component","render","Empty","spanStyle","display","Mediaitem","constructor","props","downloadMedia","bind","clipBoard","createRef","clipBoardButton","state","isVideo","linkUrl","tvalue","trackingLink","tracking_link","downloadUrl","download_url","componentDidMount","current","focus","cutTextareaBtn","this2","addEventListener","event","cutTextarea","value","select","successful","document","execCommand","msg","alert","err","console","log","proxyurl","url","fetch","method","headers","media_type","then","response","blob","link","getElementById","setAttribute","click","button","toString","setState","invisibility","opacity","height","width","cover_photo_url"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nclass PlayButton extends React.Component {\r\n    render() {\r\n        return <button className=\"ui button play-button\" data-toggle=\"toggle\"\r\n                title=\"Will not Play video stored in Firebase\"><div className=\"arrow-right\"></div></button>; \r\n    }\r\n}\r\n\r\nclass Empty extends React.Component {\r\n    render() { \r\n        const spanStyle = {\r\n            display:'none'\r\n        }\r\n        return <span style={spanStyle}></span>;\r\n    }\r\n}\r\n\r\n\r\nclass Mediaitem extends React.Component { \r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.downloadMedia = this.downloadMedia.bind(this);   \r\n        this.clipBoard = React.createRef();        \r\n        this.clipBoardButton = React.createRef();\r\n\r\n        this.state = {\r\n            isVideo: false,\r\n            linkUrl:'',\r\n            tvalue:'',\r\n            trackingLink: this.props.tracking_link,\r\n            downloadUrl: this.props.download_url\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.clipBoardButton.current.focus();\r\n        this.clipBoard.current.focus();\r\n        var cutTextareaBtn = this.clipBoardButton.current;\r\n        var this2 = this;\r\n        cutTextareaBtn.addEventListener('click', function(event) {\r\n        var cutTextarea = this2.clipBoard.current;\r\n\r\n        let value = cutTextarea.value;\r\n        cutTextarea.select();\r\n\r\n        try {\r\n            var successful = document.execCommand('cut');\r\n                var msg = successful ? 'successful' : 'unsuccessful';\r\n                alert('Cutting text command was ' + msg + \" and '\" + value + \"' was copied to clipboard\");\r\n            } catch(err) {\r\n                console.log('Oops, unable to cut');\r\n            }\r\n        });\r\n    }\r\n\r\n    downloadMedia(){\r\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n        const url = this.state.downloadUrl;\r\n\r\n        fetch(proxyurl + url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': this.props.media_type,\r\n                'Access-Control-Allow-Origin':'*'\r\n            },\r\n        })\r\n        .then((response) => response.blob())\r\n        .then((blob) => {\r\n            const link = document.getElementById('forDownload');\r\n            link.setAttribute(\r\n            'download',\r\n            this.state.downloadUrl,\r\n            );\r\n\r\n            // Start download\r\n            link.click();\r\n\r\n        });\r\n    }\r\n\r\n   \r\n    render() {      \r\n        \r\n        let button;\r\n        if(this.props.media_type.toString() === \"video\"){\r\n            this.setState.isVideo = true;\r\n            button = <PlayButton />        }\r\n        else {\r\n            this.setState.isVideo = false;\r\n            button = <Empty />\r\n        }\r\n\r\n        const invisibility = {\r\n            opacity:0,\r\n            height:0,\r\n            width:0            \r\n        }\r\n\r\n       \r\n      return (\r\n          <div className=\"item\">    \r\n\r\n                <img src={this.props.cover_photo_url} className=\"img-responsive item-image\" alt=\"...\" width=\"70\" height=\"120\"></img>\r\n                <div className=\"media-buttons ui icon buttons\">\r\n                    <button className=\"ui button no-play\"  ref={this.clipBoardButton} disable><i className=\"fas fa-link\" aria-hidden=\"true\"></i></button>\r\n                    <button className=\"ui button no-play\" onClick={this.downloadMedia.bind(this.props.download_url, this.props.media_type)}\r\n                        data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click will only download the Firebase Url\"                \r\n                        ><i className=\"fas fa-download\" aria-hidden=\"true\"></i>\r\n                    </button>                   \r\n                    { button }\r\n                </div>\r\n                <a href={this.state.linkUrl} id=\"forDownload\" style={invisibility}>Check</a> \r\n                <textarea ref={this.clipBoard} style={invisibility}>{this.state.trackingLink}</textarea>\r\n          </div>\r\n        \r\n     \r\n        )\r\n    }\r\n  }\r\n  export default Mediaitem;"]},"metadata":{},"sourceType":"module"}